[{"content":"This guide is to make the initial steps from formating the microSD card to having ssh access to a headless Raspberry Pi.\n Headless Raspberry Pi Fresh Installation  Install the rpi-imager. Choose the Raspberry Pi OS Lite (64-bit) Select the microSD card and Write  Prepare the microSD card Before the first boot the microSD card needs a user account and the SSH connection enabled.\nUser account Add a userconf.txt file in the boot folder. In the file include: username:password (your username, followed by a colon, followed by the encrypted password)\nTo generate the encrypted password:\necho 'mypassword' | openssl passwd -6 -stdin Enable SSH Add an empty ssh file in the boot folder Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Web Server is available at http://localhost:1313/ (bind address 127.0.0.1)\nBoot and SSH into the Raspberry Pi Insert the microSD card and boot the Raspberry Pi with an ethernet cable connected.\nConnect with ssh:\nssh username@192.168.x.x  Adjustments after first boot Change default ssh port sudo nano /etc/ssh/sshd_config Uncomment the #22 and change it to the desired port (i.e. 2234)\nRestart SSH sudo systemctl restart ssh Exit \u0026amp; connect with ssh again:\nexit ssh username@192.168.x.x -p 2234  Install Firewall UFW sudo apt install ufw Allow a port sudo ufw allow 2234 Deny a port sudo ufw deny 22 Limit a port sudo ufw limit ssh/tcp Start UFW sudo ufw enable Firewall status sudo ufw status #add `verbose` for more info or `numbered` for id numbers Delete rules sudo ufw delete x #where `x` is the number id when doing status numbered Enable logs sudo ufw logging on The logs are stored under /var/log/ufw.log\nReset UFW sudo ufw reset  If you liked this, consider sending a tip by ko-fi from the button below, and if you want to send me any feedback, you can reach me by email. \n","permalink":"https://al3xis.xyz/posts/quickguide-headless-raspberri-pi/","summary":"This guide is to make the initial steps from formating the microSD card to having ssh access to a headless Raspberry Pi.\n Headless Raspberry Pi Fresh Installation  Install the rpi-imager. Choose the Raspberry Pi OS Lite (64-bit) Select the microSD card and Write  Prepare the microSD card Before the first boot the microSD card needs a user account and the SSH connection enabled.\nUser account Add a userconf.","title":"Quickguide - Headless Raspberri Pi setup"},{"content":"This guide assumes that you have already bought a domain for your website (I recommend Porkbun if you want to buy one now). The domain cost is the only cost needed in this guide. To create, host and publish your website is completely FREE!\n Hugo installation There are many ways to install Hugo in all major operating systems, described under the Hugo installation documentation\nTo install Hugo on some of the popular Linux distributions:\nDebian/Ubuntu based: snap install hugo Arch based: pacman -S hugo Fedora/Red Hat based: dnf install hugo Verify the installation and check the version:\nhugo version New Hugo site Now, navigate to the folder where you want Hugo to create your website\u0026rsquo;s folder. For example in webdev/sites\nhugo new site myWebsite This will create a new folder for your website with the hugo structure in it webdev/sites/myWebsite\nAdd a Hugo theme Find a Hugo theme you like and add it to your themes folder. I chose here the PaperMod theme (PaperMod installation documentation)\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod --depth=1 git submodule update --init --recursive # needed when you reclone your repo (submodules may not get cloned automatically) Update the theme when needed with:\ngit submodule update --remote --merge  Start Git and connect with GitHub Git installation This will assume an operating system based on Ubuntu linux. For other operating systems check the Git download page\nFirst, let\u0026rsquo;s check if Git is already installed and what version it is:\ngit --version Git version 2.28 brought many updates including the possibility to change the default branch to something different than just master. This is important in order to align with the GitHub\u0026rsquo;s change in default branch name from master to main.\nSo, if you don\u0026rsquo;t have Git or you have a version older than 2.28 then install the latest version of Git:\nsudo add-apt-repository ppa:git-core/ppa sudo apt update sudo apt install git Git configuration First-Time Git Setup Documentation\nSet your name and email in Git:\ngit config --global user.name \u0026quot;My Name\u0026quot; git config --global user.email \u0026quot;myname@email.com\u0026quot; And now we can set Git to initialize by default with the branch main and thus align with GitHub as mentioned earlier:\ngit config --global init.defaultBranch main We can also enable colors in Git with:\ngit config --global color.ui auto Lastly, verify that your name and email is properly added in the new configuration:\ngit config --get user.name git config --get user.email Create a GitHub account Create a GitHub account if you don\u0026rsquo;t have an account yet. Gitlab, Bitbucket and others should work too but might need some different settings comparing to GitHub.\nNow create a new GitHub repository where we will store our Hugo files, for example with a name myWebsite. Then we will have an SSH link for the GitHub repository such as git@github.com:myname/myWebsite.git which we will use later to connect in our local Git environment.\nCreate an SSH key and insert it in GitHub In order to connect to your GitHub account from your local machine without having to give a username and password everytime then you can setup an SSH key.\nIn the terminal check if you already have an SSH key:\nls ~/.ssh/id_rsa.pub If you get a message No such file or directory then create an SSH key by using the email you used to create an account on GitHub:\nssh-keygen -C myname@email.com During the key generation process it will prompt you for a location to save the generated key and ask for a password, but you can just press Enter to skip both.\nNow we can print/see the newly made public SSH key in the terminal with:\ncat ~/.ssh/id_rsa.pub Copy the output in order to insert it in GitHub by going to your profile image on the top right corner and then Settings -\u0026gt; SSH and GPG keys -\u0026gt; New SSH key. Add a title of your choice and paste the key in the field below.\nTest the SSH connection with GitHub by entering in your terminal:\nssh -T git@github.com If everything is configured correctly you should see:\n Hi myname! You\u0026rsquo;ve successfully authenticated, but GitHub does not provide shell access.\n Connect Git with GitHub Now we can start working on our Hugo website and push the local files to the GitHub repository.\nStart Git in the folder with the Hugo files (check the Git documentation for details). First navigate in the folder webdev/sites/myWebsite and then initialize Git, add all files (don\u0026rsquo;t forget the dot .), commit the files, choose the branch, connect to the GitHub repository we created earlier and finally push the files up to GitHub:\ncd webdev/sites/myWebsite git init git add . git commit -m \u0026quot;first commit\u0026quot; git branch -M main git remote add origin git@github.com:myname/myWebsite.git git push -u origin main Next time we want to connect to an existing repository with our files on GitHub we can just clone the repository locally to start working on the latest version of the files:\ngit clone git@github.com:myname/myWebsite.git  Install Visual Studio Code Now all the configuration is done and we are ready to start editing our Hugo site! The most popular code editor software is Visual Studio Code. Just install it, navigate to your folder structure and start editing the files. Then you can manage the Git commands straight in Visual Studio Code.\n Connect your GitHub repository to Netlify The Hugo documentation about Netlify is quite nice to follow.\nFirst make an account on Netlify and connect it to your GitHub account.\nNext we can create a netlify.toml file in our Hugo folder. Go to Configure Hugo Version in Netlify and copy all the contents into your file. You can change the version number if you want in the file. Save it and push it to your GitHub account.\nNow from Netlify we can continue and create a New site from Git. Choose your new repository when asked and in the last step enter Hugo in the field command and public for directory.\nOur website will deploy now with Netlify. We get a url from Netlify to check our website in the form of something.netlify.app. To connect your own domain with Netlify follow Netlify\u0026rsquo;s instructions on custom domains. The instructions will take you to change the nameservers in your domain provider (for example in Porkbun) to specific nameservers from Netlify. This change should take an hour to be register from your domain provider and then another hour from Netlify. So in total 2 hours minimum from the time you change nameservers to Netlify\u0026rsquo;s in your domain provider until you see your website through your domain url. In the meantime you can edit your website and push the changes to GitHub and use Netlify\u0026rsquo;s own url to see your page take shape.\nDone!\nOf course there are plenty more settings in Netlify but the basics are done and you have a working site for free! One cool thing I do in Netlify is to have a dev.mywebsite.com that takes my Hugo files from a secondary branch dev on GitHub and deploy a website with ongoing changes to the dev.mywebsite.com. This is perfect in order to work on a draft version of the website and see the work take shape without affecting the actual website where people might be visiting. If you are interested in that check Netlify\u0026rsquo;s documentation on branch deploys.\n If you liked this, consider sending a tip by ko-fi from the button below, and if you want to send me any feedback, you can reach me by email. \n","permalink":"https://al3xis.xyz/posts/quickguide-hugo/","summary":"This guide assumes that you have already bought a domain for your website (I recommend Porkbun if you want to buy one now). The domain cost is the only cost needed in this guide. To create, host and publish your website is completely FREE!\n Hugo installation There are many ways to install Hugo in all major operating systems, described under the Hugo installation documentation\nTo install Hugo on some of the popular Linux distributions:","title":"Quickguide - Hugo | Git | Netlify setup"},{"content":"Create comments file First create a html file in: layouts/partials/comments.html This is applicable mostly for the PaperMod theme. Other themes usually use a disqus.html file. It is important to name the file in the right way so your theme will recognise it. Check the documentation of your theme, in my case the PaperMod theme documentation about comments is here: https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-features/#comments\nHugo Disqus template Copy from Hugo repository tpl/tplimpl/embedded/templates/disqus.html\nAdd all the lines in the previously created comments.html file\nI replaced the lines: {{with .Params.disqus_identifier }}this.page.identifier = \u0026#39;{{ . }}\u0026#39;;{{end}} {{with .Params.disqus_title }}this.page.title = \u0026#39;{{ . }}\u0026#39;;{{end}} {{with .Params.disqus_url }}this.page.url = \u0026#39;{{ . | html }}\u0026#39;;{{end}}\nWith these: this.page.url = \u0026#39;{{ .Permalink }}\u0026#39;; this.page.identifier = \u0026#39;{{ .Permalink }}\u0026#39;; this.page.title = \u0026#39;{{ .Title }}\u0026#39;;\n If you liked this, consider sending a tip by ko-fi from the button below, and if you want to send me any feedback, you can reach me by email. \n","permalink":"https://al3xis.xyz/posts/setting-up-disqus-comments-in-hugo/","summary":"Create comments file First create a html file in: layouts/partials/comments.html This is applicable mostly for the PaperMod theme. Other themes usually use a disqus.html file. It is important to name the file in the right way so your theme will recognise it. Check the documentation of your theme, in my case the PaperMod theme documentation about comments is here: https://adityatelange.github.io/hugo-PaperMod/posts/papermod/papermod-features/#comments\nHugo Disqus template Copy from Hugo repository tpl/tplimpl/embedded/templates/disqus.html\nAdd all the lines in the previously created comments.","title":"Setting Up Disqus Comments in Hugo"},{"content":"The PaperMod theme! Installation Install as a submodule with\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/hugo-PaperMod git submodule update --init --recursive   If you liked this, consider sending a tip by ko-fi from the button below, and if you want to send me any feedback, you can reach me by email. \n","permalink":"https://al3xis.xyz/posts/papermod-theme/","summary":"The PaperMod theme! Installation Install as a submodule with\ngit submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/hugo-PaperMod git submodule update --init --recursive   If you liked this, consider sending a tip by ko-fi from the button below, and if you want to send me any feedback, you can reach me by email.","title":"PaperMod Theme"},{"content":"Hello world This my first post A new blog site built with Hugo. Future deploy with Netlify.\nThe testing continues Trying to finalise git and then will set-up Netlify.\nDeploying with Netlify  Successfully changed DNS nameservers to point to Netlify. Successfully enabled https. Netlify domain works and shows the website. BUT my domain doesn\u0026rsquo;t seem to work yet\u0026hellip; Maybe needs more time for the nameservers to refresh on the Netlify\u0026rsquo;s part?  It\u0026rsquo;s LIVE! It was after all, the DNS refresh time from Netlify that was at 1 hour, so probably that needed to wait and refresh. So all in all after changing nameserves to my domain provider it takes approximately 2 hours for the website to be deployed by Netlify.\n","permalink":"https://al3xis.xyz/posts/my-first-post/","summary":"Hello world This my first post A new blog site built with Hugo. Future deploy with Netlify.\nThe testing continues Trying to finalise git and then will set-up Netlify.\nDeploying with Netlify  Successfully changed DNS nameservers to point to Netlify. Successfully enabled https. Netlify domain works and shows the website. BUT my domain doesn\u0026rsquo;t seem to work yet\u0026hellip; Maybe needs more time for the nameservers to refresh on the Netlify\u0026rsquo;s part?","title":"My First Post"},{"content":"  Home...   al3xis.xyz\n","permalink":"https://al3xis.xyz/about/","summary":"Home...   al3xis.xyz","title":"About"}]